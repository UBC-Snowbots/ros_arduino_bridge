# For a direct USB cable connection, the port name is typically
# /dev/ttyACM# where is # is a number such as 0, 1, 2, etc
# For a wireless connection like XBee, the port is typically
# /dev/ttyUSB# where # is a number such as 0, 1, 2, etc.

port: /dev/ttyACM0
baud: 57600
timeout: 0.1

rate: 50
sensorstate_rate: 10

use_base_controller: True
base_controller_rate: 10

# For a robot that uses base_footprint, change base_frame to base_footprint
base_frame: base_link

# === Robot drivetrain parameters
wheel_diameter: 0.25
wheel_track: 0.49
encoder_resolution: 1024 # from Pololu for 131:1 motors
gear_reduction: 1.0
motors_reversed: False

# === PID parameters
Kp: 8
Kd: 0
Ki: 0
Ko: 4
accel_limit: 1.0

# === Odometry parameters
# Whether or not to publish the odom -> base_frame transformation
# Snowbots Note: We don't use this, because the EKF publishes this transform
enable_odom_tf: False
# Diagonal of the covriance matrix of the pose component of the odom message
odom_pose_covariance_diagonal: 
    [0.001, 0.001, 1000000.0, 1000000.0, 1000000.0, 0.03]
# Diagonal of the covriance matrix of the twist component of the odom message
odom_twist_covariance_diagonal:
    [0.001, 0.001, 1000000.0, 1000000.0, 1000000.0, 0.03]

# === Sensor definitions.  Examples only - edit for your robot.
#     Sensor type can be one of the follow (case sensitive!):
#	  * Ping
#	  * GP2D12
#	  * Analog
#	  * Digital
#	  * PololuMotorCurrent
#	  * PhidgetsVoltage
#	  * PhidgetsCurrent (20 Amp, DC)



sensors: {
  #motor_current_left:   {pin: 0, type: PololuMotorCurrent, rate: 5},
  #motor_current_right:  {pin: 1, type: PololuMotorCurrent, rate: 5},
  #ir_front_center:      {pin: 2, type: GP2D12, rate: 10},
  #sonar_front_center:   {pin: 5, type: Ping, rate: 10},
  arduino_led:          {pin: 13, type: Digital, rate: 5, direction: output}
}
